<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\Fee;
use App\Entity\User;

/**
 * RiaCompanyInformationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeeRepository extends EntityRepository
{
    //    /**
//     *
//     * @deprecated moved to FeeManager
//     * @param $riaId
//     * @param array $riaFees
//     * @return array
//     */
//    public function getClientFees($riaId, $riaFees = array())
//    {
//        $admin = $this->_em->getRepository('App\Entity\User')->getAdmin();
//        $adminFees = $this->getAdminFeesForRia($admin->getId(), $riaId);
//
//        $sortFees = array();
//        foreach($adminFees as $adminFee){
//            $sortFees[] = $adminFee->getTierTop();
//        }
//
//        // Add to array all fees from ria
//        foreach ($riaFees as $riaFee) {
//            if ($riaFee instanceof Fee) {
//                if ($riaFee->getTierTop() && !in_array($riaFee->getTierTop(), $sortFees)) {
//                    $sortFees[] = $riaFee->getTierTop();
//                }
//            } else {
//                if ($riaFee['tier_top'] && !in_array($riaFee['tier_top'], $sortFees)) {
//                    $sortFees[] = $riaFee['tier_top'];
//                }
//            }
//        }
//
//        sort($sortFees);
//
//        // Search intervals and calculate total fees for client
//        $start = 0;
//        $currFeeWithoutRetirement = 0;
//        $currFeeWithRetirement = 0;
//        $clientFees = array();
//
//        foreach ($sortFees as $sortFee) {
//            // Search admin fee
//            foreach ($adminFees as $adminFee) {
//                if ($adminFee->getTierTop() >= $sortFee) {
//                    $currFeeWithoutRetirement = $adminFee->getFeeWithoutRetirement();
//                    $currFeeWithRetirement = $adminFee->getFeeWithRetirement();
//                    break;
//                }
//            }
//
//            // Search client fee
//            foreach ($riaFees as $riaFee) {
//                if ($riaFee instanceof Fee) {
//                    if ($riaFee->getTierTop() >= $sortFee) {
//                        $currFeeWithoutRetirement += $riaFee->getFeeWithoutRetirement();
//                        $currFeeWithRetirement += $riaFee->getFeeWithoutRetirement();
//                        break;
//                    }
//                } else {
//                    if ($riaFee['tier_top'] >= $sortFee) {
//                        $currFeeWithoutRetirement += $riaFee['fee_without_retirement'];
//                        $currFeeWithRetirement += $riaFee['fee_without_retirement'];
//                        break;
//                    }
//                }
//            }
//
//            // Store data
//            $currFeeCard['tier_bottom'] = $start;
//            $currFeeCard['tier_top'] = $sortFee;
//            $currFeeCard['fee_without_retirement'] = $currFeeWithoutRetirement;
//            $currFeeCard['fee_with_retirement'] = $currFeeWithRetirement;
//            $start = $sortFee + 0.01;
//            $clientFees[] = $currFeeCard;
//        }
//
//        return $clientFees;
//    }
//
//    /**
//     * @deprecated moved to FeeManager
//     *
//     * @param $riaId
//     * @return array
//     */
//    public function getClientFeesByRiaId($riaId)
//    {
//        $riaFees = $this->findBy(array('owner_id' => $riaId, 'appointed_user_id' => null));
//
//        return $this->getClientFees($riaId, $riaFees);
//    }
//
//    /**
//     * @deprecated
//     * @param $adminId
//     * @param $riaId
//     * @return array
//     */
//    public function getAdminFeesForRia($adminId, $riaId)
//    {
//        $fees = $this->findBy(array('owner_id' => $adminId, 'appointed_user_id' => $riaId));
//        if (!count($fees)) {
//            $fees = $this->findBy(array('owner_id' => $adminId, 'appointed_user_id' => null));
//        }
//
//        return $fees;
//    }

//    @Deprecated
//    public function findByOwner(User $owner)
//    {
//        return $this->findBy(array('owner' => $owner, 'appointed_user_id' => null));
//    }
}
