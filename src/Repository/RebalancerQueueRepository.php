<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\RebalancerAction;
use App\Entity\RebalancerQueue;
use App\Model\TradeData;
use App\Entity\User;

/**
 * RebalancerQueueRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RebalancerQueueRepository extends EntityRepository
{
    public function findGroupedInformationByRebalancerAction(RebalancerAction $rebalancerAction, $withDeleted = true)
    {
        $qb = $this->createQueryBuilder('rq')
            ->select([
                'rq', 'sca', 'sb', 's', 'l',
                'SUM(rq.amount) as total_amount',
                'SUM((l.costBasis / l.quantity) * rq.quantity) as total_cost_basis',
                'SUM(rq.quantity * sp.price) as total_market_value',
                '(SUM(rq.quantity * sp.price) - SUM((l.costBasis / l.quantity) * rq.quantity)) / SUM((l.costBasis / l.quantity) * rq.quantity) as total_gain_or_loss_percent',
                'SUM(rq.quantity * sp.price) - SUM((l.costBasis / l.quantity) * rq.quantity) as total_gain_or_loss',
            ])
            ->leftJoin('rq.systemClientAccount', 'sca')
            ->leftJoin('rq.subclass', 'sb')
            ->leftJoin('rq.security', 's')
            ->leftJoin('rq.lot', 'l')
            ->leftJoin('s.securityPrices', 'sp')
            ->where('rq.rebalancerAction = :rebalancerAction')
            ->andWhere('sp.is_current = 1')
            ->groupBy('sca.id, sb.id, s.id')
            ->setParameter('rebalancerAction', $rebalancerAction)
        ;

        if (false === $withDeleted) {
            $qb
                ->andWhere('rq.is_deleted = :isDeleted')
                ->setParameter('isDeleted', false);
        }

        return $qb->getQuery()->getResult();
    }

    public function findByRebalancerAction(RebalancerAction $rebalancerAction, $withDeleted = true)
    {
        $qb = $this->createQueryBuilder('rq')
            ->select(['rq', 'sca', 'sb', 's', 'l'])
            ->leftJoin('rq.systemClientAccount', 'sca')
            ->leftJoin('rq.subclass', 'sb')
            ->leftJoin('rq.security', 's')
            ->leftJoin('rq.lot', 'l')
            ->leftJoin('s.securityPrices', 'sp')
            ->where('rq.rebalancerAction = :rebalancerAction')
            ->andWhere('sp.is_current = 1')
            ->setParameter('rebalancerAction', $rebalancerAction)
        ;

        if (false === $withDeleted) {
            $qb
                ->andWhere('rq.is_deleted = :isDeleted')
                ->setParameter('isDeleted', false);
        }

        return $qb->getQuery()->getResult();
    }

    public function findRelatedSellTrades(RebalancerQueue $rebalancerQueue)
    {
        $qb = $this->createQueryBuilder('rq')
            ->where('rq.systemClientAccount = :systemClientAccount')
            ->andWhere('rq.subclass = :subclass')
            ->andWhere('rq.security = :security')
            ->andWhere('rq.rebalancerAction = :rebalancerAction')
            ->setParameters([
                'subclass' => $rebalancerQueue->getSubclass(),
                'security' => $rebalancerQueue->getSecurity(),
                'systemClientAccount' => $rebalancerQueue->getSystemClientAccount(),
                'rebalancerAction' => $rebalancerQueue->getRebalancerAction(),
            ])
        ;

        return $qb->getQuery()->getResult();
    }

    public function getTradeRecon(\DateTime $dateFrom, \DateTime $dateTo, User $ria = null, $clientName = '')
    {
        $qb = $this->createQueryBuilder('rebalancerQueue')
            ->leftJoin('rebalancerQueue.lot', 'lot')
            ->join('rebalancerQueue.systemClientAccount', 'systemAccount')
            ->join('rebalancerQueue.rebalancerAction', 'rebalancerAction')
            ->join('rebalancerAction.job', 'jobs')
            ->join('systemAccount.client', 'client')
            ->join('client.profile', 'profile')

            ->where('jobs.started_at >= :dateFrom')
            ->setParameter('dateFrom', $dateFrom)

            ->andWhere('jobs.started_at <= :dateTo')
            ->setParameter('dateTo', $dateTo)
        ;

        if ($ria) {
            $qb
                ->andWhere('profile.ria = :ria')
                ->setParameter(':ria', $ria)
            ;
        }

        if ($clientName) {
            $nameArray = preg_replace("~\W~", '', explode(' ', $clientName));

            foreach ($nameArray as $key => $value) {
                $orX = $qb->expr()->orX();

                $orX->add($qb->expr()->like('profile.first_name', '?'.($key * 2 + 1)));
                $orX->add($qb->expr()->like('profile.last_name', '?'.($key * 2 + 2)));

                $qb->setParameter($key * 2 + 1, '%'.$value.'%');
                $qb->setParameter($key * 2 + 2, '%'.$value.'%');

                $qb->andWhere($orX);
            }
        }

        return $qb->getQuery()->execute();
    }

    public function findTradeDataArrayForClientAccountValuesIds(array $clientAccountValuesIds)
    {
        $sql = "SELECT
                  rq.id as id,
                  ra.job_id as job_id,
                  s.id as security_id,
                  sca.id as account_id,
                  sca.account_number as account_number,
                  st.name as security_type,
                  rq.status as action,
                  p.quantity as position_quantity,
                  s.symbol as symbol,
                  SUM(rq.quantity) as quantity,
                  SUM(rq.amount) as amount,
                  IF(p.quantity = SUM(rq.quantity) OR (rq.status = :status AND rq.lot_id IS NULL), 'AS', 'S') as quantity_type
                FROM rebalancer_queue rq
                  LEFT JOIN securities s ON s.id = rq.security_id
                  LEFT JOIN system_client_accounts sca ON sca.id = rq.system_client_account_id
                  LEFT JOIN security_types st ON st.id = s.security_type_id
                  LEFT JOIN lots l ON l.id = rq.lot_id
                  LEFT JOIN positions p ON p.id = l.position_id
                  LEFT JOIN rebalancer_actions ra ON ra.id = rq.rebalancer_action_id
                WHERE ra.client_account_value_id IN (:clientAccountValuesIds) AND
                      (ra.id = (SELECT id FROM rebalancer_actions ra1
                                  WHERE ra1.client_account_value_id = ra.client_account_value_id
                                ORDER BY ra1.id DESC LIMIT 1))
                GROUP BY sca.id, s.id
                ORDER BY rq.id"
        ;

        $connection = $this->getEntityManager()->getConnection();

        $stmt = $connection->prepare($sql);
        $stmt->bindValue('clientAccountValuesIds', implode(',', $clientAccountValuesIds));
        $stmt->bindValue('status', RebalancerQueue::STATUS_SELL);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function findTradeDataArrayForClientPortfolioValuesIds(array $clientPortfolioValuesIds)
    {
        $sql = "SELECT
                  rq.id as id,
                  rq.job_id as job_id,
                  s.id as security_id,
                  sca.id as account_id,
                  sca.account_number as account_number,
                  st.name as security_type,
                  rq.status as action,
                  p.quantity as position_quantity,
                  s.symbol as symbol,
                  SUM(rq.quantity) as quantity,
                  SUM(rq.amount) as amount,
                  IF(p.quantity = SUM(rq.quantity) OR (rq.status = :status AND rq.lot_id IS NULL), 'AS', 'S') as quantity_type
                FROM rebalancer_queue rq
                  LEFT JOIN securities s ON s.id = rq.security_id
                  LEFT JOIN system_client_accounts sca ON sca.id = rq.system_client_account_id
                  LEFT JOIN security_types st ON st.id = s.security_type_id
                  LEFT JOIN lots l ON l.id = rq.lot_id
                  LEFT JOIN positions p ON p.id = l.position_id
                  LEFT JOIN rebalancer_actions ra ON ra.id = rq.rebalancer_action_id
                WHERE ra.client_portfolio_value_id IN (:clientPortfolioValuesIds) AND
                      (ra.id = (SELECT id FROM rebalancer_actions ra1
                                  WHERE ra1.client_portfolio_value_id = ra.client_portfolio_value_id
                                ORDER BY ra1.id DESC LIMIT 1))
                GROUP BY sca.id, s.id
                ORDER BY rq.id"
        ;

        $connection = $this->getEntityManager()->getConnection();

        $stmt = $connection->prepare($sql);
        $stmt->bindValue('clientPortfolioValuesIds', implode(',', $clientPortfolioValuesIds));
        $stmt->bindValue('status', RebalancerQueue::STATUS_SELL);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function findVSPForTradeData(TradeData $tradeData)
    {
        $sql = "
            SELECT 'VSP' as purchase, DATE_FORMAT(l.date,'%m%d%Y') as purchase_date, rq.quantity
            FROM rebalancer_queue rq
              LEFT JOIN lots l ON l.id = rq.lot_id
              LEFT JOIN rebalancer_actions ra On ra.id = rq.rebalancer_action_id
            WHERE rq.system_client_account_id = :accountId AND rq.security_id = :securityId
        ";

        $connection = $this->getEntityManager()->getConnection();

        $stmt = $connection->prepare($sql);
//        $stmt->bindValue('jobId', $tradeData->getJobId());
        $stmt->bindValue('accountId', $tradeData->getAccountId());
        $stmt->bindValue('securityId', $tradeData->getSecurityId());
        $stmt->execute();

        return $stmt->fetchAll();
    }
}
