<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\CeModel;
use App\Entity\Security;
use App\Entity\SecurityAssignment;
use App\Entity\Subclass;
use App\Entity\SystemAccount;
use App\Entity\User;

/**
 * SubclassRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SecurityAssignmentRepository extends EntityRepository
{
    public function findAllForAdminQuery()
    {
        $qb = $this->createQueryBuilder('sa');

        $qb->select('sa', 'sc', 'ac', 'ss', 'st')
            ->leftJoin('sa.subclass', 'sc')
            ->leftJoin('sa.security', 'ss')
            ->leftJoin('sc.assetClass', 'ac')
            ->leftJoin('sa.securityTransaction', 'st')
            //->where('sa.model_id IS NULL AND sa.ria_user_id IS NULL')
            ->where('sa.model_id IS NULL')
            ->groupBy('sa.id');

        return $qb->getQuery();
    }

    public function findAllForAdmin()
    {
        return $this->findAllForAdminQuery()->getResult();
    }

    public function findByAccountIdAndRiaId($accountId, $riaId)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.accountAssociations', 'aa')
            //->where('s.ria_user_id = :ria_id')
            ->andWhere('aa.account_id = :account_id')
            //->setParameters(array('ria_id' => $riaId, 'account_id' => $accountId));
            ->setParameters(['account_id' => $accountId]);

        return $qb->getQuery()->getResult();
    }

    /**
     * @deprecated
     */
    public function findOneBySecurityIdAndAccountId($securityId, $accountId)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.accountAssociations', 'aa')
            ->where('s.security_id = :security_id')
            ->andWhere('aa.account_id = :account_id')
            ->setParameters(['security_id' => $securityId, 'account_id' => $accountId])
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getOneBySecurityAndAccount(Security $security, SystemAccount $systemAccount)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.subclass', 'sc')
            ->where('sc.owner = :ria')
            ->setParameter('ria', $systemAccount->getClient()->getRia())
            ->andWhere('s.security = :security')
            ->setParameter('security', $security)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findByModelIdAndSecurityId($modelId, $securityId)
    {
        $qb = $this->createQueryBuilder('s')
            ->andWhere('s.model_id = :model_id')
            ->andWhere('s.security_id = :security_id')
            ->setParameters([
                'model_id' => $modelId,
                'security_id' => $securityId,
            ])
            ->setMaxResults(1);

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    public function getAvailableSecuritiesQuery(CeModel $model, $subclassId, $currentEntityId = null)
    {
        $securitiesIds = [];

        if ($currentEntityId) {
            $entities = $model->getModelEntities();

            foreach ($entities as $entity) {
                if ($currentEntityId !== $entity->getId()) {
                    $securitiesIds[] = $entity->getSecurityAssignmentId();
                }
            }
        }

        $qb = $this->createQueryBuilder('s')
            //->where('s.subclass_id = :subclassId AND s.ria_user_id IS NULL')
            ->where('s.subclass_id = :subclassId')
            ->andWhere('s.muni_substitution = 0');

        if (!empty($securitiesIds)) {
            $qb->andWhere($qb->expr()->notIn('s.id', $securitiesIds));
        }

        $qb->setParameter('subclassId', $subclassId)
            ->orderBy('s.id', 'ASC');

        return $qb;
    }

    public function getAvailableMuniSubstitutionsQuery($parentModelId, $subclassId)
    {
        $qb = $this->createQueryBuilder('s')
            ->where('s.model_id = :model_id')
            ->andWhere('s.muni_substitution = 1')
            ->andWhere('s.subclass_id = :subclass_id')
            ->setParameter('model_id', $parentModelId)
            ->setParameter('subclass_id', $subclassId);

        return $qb;
    }

    public function getSecuritiesQBBySubclassIdAndWithoutSecuritiesIds($subclassId, $securityAssignmentsIds = [])
    {
        $qb = $this->createQueryBuilder('s')
            //->where('s.subclass_id = :subclassId AND s.ria_user_id IS NULL')
            ->where('s.subclass_id = :subclassId')
            ->andWhere('s.id != (:securityAssignmentId)')
            ->andWhere('s.id != (:muniSubstitutionId)')
            ->setParameter('subclassId', $subclassId)
            ->setParameter('securityAssignmentId', (isset($securityAssignmentsIds[0]) ? $securityAssignmentsIds[0] : 0))
            ->setParameter('muniSubstitutionId', (isset($securityAssignmentsIds[1]) ? $securityAssignmentsIds[1] : 0))
            ->orderBy('s.id', 'ASC');

        return $qb;
    }

    public function hasMuniSubstitution(CeModel $parentModel, Subclass $subclass, User $user)
    {
        $qb = $this->createQueryBuilder('s');

        /*if($user->hasRole('ROLE_RIA') || $user->hasRole('ROLE_SUPER_ADMIN')){
            $qb->where("s.ria_user_id IS NULL");
        }else{
            $qb->where("s.ria_user_id = :ria_user_id")->setParameter("ria_user_id", $user->getId());
        }*/

        $qb->andWhere('s.model_id = :model_id')
            ->andWhere('s.subclass_id = :subclass_id')
            ->andWhere('s.muni_substitution = 1')
            ->setParameter('model_id', $parentModel->getId())
            ->setParameter('subclass_id', $subclass->getId())
            ->setMaxResults(1)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findAssignedSecurityIdsByModelId($modelId)
    {
        $qb = $this->createQueryBuilder('sa')
            ->select('sa.security_id')
            ->where('sa.model_id = :modelId')
            ->setParameter('modelId', $modelId);

        return $qb->getQuery()->getResult();
    }

    public function findMinAndMaxTransactionFeeForModel($modelId)
    {
        $qb = $this->createQueryBuilder('sa');

        $qb->select('min(st.transaction_fee) as minimum, max(st.transaction_fee) as maximum')
            ->leftJoin('sa.securityTransaction', 'st')
            ->where('sa.model_id = :model_id')
            ->setParameter('model_id', $modelId);

        $minAndMax = $qb->getQuery()->getOneOrNullResult();
        /* @var SecurityAssignment $notTransactionSecurity */
        if ($minAndMax && !empty($minAndMax) && $this->isExistNotTransactionSecurityByModelId($modelId)) {
            if ($minAndMax['minimum'] > 0 && $minAndMax['maximum'] > 0) {
                $minAndMax['minimum'] = 0;
            } elseif ($minAndMax['maximum'] < 0) {
                $minAndMax['maximum'] = 0;
            }
        }

        return $minAndMax;
    }

    public function isExistNotTransactionSecurityByModelId($modelId)
    {
        $qb = $this->createQueryBuilder('sa');

        $qb->leftJoin('sa.securityTransaction', 'st')
            ->where('sa.model_id = :model_id')
            ->andWhere('st.id IS NULL OR (st.id IS NOT NULL AND st.transaction_fee IS NULL)')
            ->setParameter('model_id', $modelId)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
