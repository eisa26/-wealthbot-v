<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\CeModel;

/**
 * CeModelEntityRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CeModelEntityRepository extends EntityRepository
{
    public function isExistSameSubclassesForModel($modelId, $subclassId, $isQualified, $id = null)
    {
        $qb = $this->createQueryBuilder('cme')
            ->andWhere('cme.modelId = :modelId')
            ->andWhere('cme.subclassId = :subclassId')
            ->andWhere('cme.isQualified = :isQualified')
            ->setMaxResults(1);

        $qb->setParameters([
            'modelId' => $modelId,
            'subclassId' => $subclassId,
            'isQualified' => $isQualified,
        ]);

        if ($id) {
            $qb->andWhere('cme.id != :id');
            $qb->setParameter('id', $id);
        }

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getModelSubclasses(CeModel $ceModel)
    {
        $entities = $this->createQueryBuilder('ce_model_entities')
            ->select('subclasses.id AS subclass_id, subclasses.name AS label, SUM(ce_model_entities.percent) AS data')
            ->leftJoin('ce_model_entities.subclass', 'subclasses')
            ->where('ce_model_entities.model = :model')
            ->groupBy('ce_model_entities.subclass')
            ->setParameter('model', $ceModel)
            ->getQuery()->execute();
        foreach ($entities as &$entity) {
            $entity['data'] = \floatval($entity['data']);
        }

        return $entities;
    }

    public function isMuniBondSecuritiesInRiaModels($riaId)
    {
        $qb = $this->createQueryBuilder('cme')
            ->select('cme')
            ->leftJoin('cme.model', 'ce')
            ->andWhere('ce.ownerId = :ownerId')
            ->andWhere('ce.parentId is NOT null')
            ->andWhere('cme.muniSubstitutionId is NOT null')
            ->setParameter('ownerId', $riaId)
        ;

        return $qb->getQuery()->getResult();
    }

    public function isTaxLossHarvestingSecuritiesInModels($riaId)
    {
        $qb = $this->createQueryBuilder('cme')
            ->select('cme')
            ->leftJoin('cme.model', 'ce')
            ->andWhere('ce.ownerId = :ownerId')
            ->andWhere('ce.parentId is NOT null')
            ->andWhere('cme.taxLossHarvestingId is NOT null')
        ;

        $qb->setParameters([
            'ownerId' => $riaId,
        ]);

        return $qb->getQuery()->getResult();
    }
}
