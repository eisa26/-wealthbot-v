<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use App\Entity\DocumentOwnerSignature;
use App\Entity\DocumentSignature;
use App\Model\Envelope;
use App\Entity\User;

/**
 * DocumentSignatureRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentSignatureRepository extends EntityRepository
{
    /**
     * Get signatures that need updating status.
     *
     * @return array
     */
    public function getSignaturesToUpdate()
    {
        $qb = $this->createQueryBuilder('s');

        $qb->where('s.status != :completed')
            ->andWhere('s.status != :voided')
            ->andWhere('s.status != :declined')
            ->andWhere('s.status != :deleted')
            ->setParameters([
                    'completed' => Envelope::STATUS_COMPLETED,
                    'voided' => Envelope::STATUS_VOIDED,
                    'declined' => Envelope::STATUS_DECLINED,
                    'deleted' => Envelope::STATUS_DELETED,
                ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get not completed signatures by client and types.
     *
     * @param User  $client
     * @param array $types
     *
     * @return array
     */
    public function getSignaturesByClientAndTypes(User $client, array $types = [])
    {
        $qb = $this->createQueryBuilder('s');

        $qb->leftJoin('s.ownerSignatures', 'os')
            ->where('os.clientOwner = :client AND (os.status = :owner_created OR os.status = :owner_sent)')
            ->setParameters([
                'client' => $client,
                'owner_created' => DocumentOwnerSignature::STATUS_CREATED,
                'owner_sent' => DocumentOwnerSignature::STATUS_SENT,
            ]);

        $types = array_values($types);
        foreach ($types as $key => $type) {
            if (0 === $key) {
                $qb->andWhere('s.type = :type_'.$key);
            } else {
                $qb->orWhere('s.type = :type_'.$key);
            }

            $qb->setParameter('type_'.$key, $type);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Find signatures by client account consolidator id.
     * Order by id.
     *
     * @param int $consolidatorId
     *
     * @return array
     */
    public function findSignaturesByAccountConsolidatorId($consolidatorId)
    {
        $sql = 'SELECT ds.* FROM document_signatures ds
                LEFT JOIN client_accounts ca ON (ds.source_id = ca.id AND ds.type = :open_or_transfer_account)
                LEFT JOIN client_account_contribution cac ON (ds.source_id = cac.id AND ds.type = :auto_invest_contribution)
                LEFT JOIN distributions cad ON (ds.source_id = cad.id AND ds.type = :auto_distribution)
                LEFT JOIN one_time_contribution otc ON (ds.source_id = otc.id AND ds.type = :one_time_contribution)

                LEFT JOIN system_client_accounts sca1 ON (otc.system_account_id = sca1.id)
                LEFT JOIN client_accounts ca1 ON (sca1.client_account_id = ca1.id)

                LEFT JOIN system_client_accounts sca2 ON (cad.system_client_account_id = sca2.id)
                LEFT JOIN client_accounts ca2 ON (sca2.client_account_id = ca2.id)

                LEFT JOIN transfer_information ti ON (ds.source_id = ti.id AND ds.type = :transfer_information)
                LEFT JOIN client_accounts ca3 ON (ti.client_account_id = ca3.id)
                WHERE (ca.id = :consolidatorId OR ca.consolidator_id = :consolidatorId) OR
                      (cac.account_id = :consolidatorId) OR
                      (cad.system_client_account_id = :consolidatorId) OR
                      (ca1.id = :consolidatorId OR ca1.consolidator_id = :consolidatorId) OR
                      (ca2.id = :consolidatorId OR ca2.consolidator_id = :consolidatorId) OR
                      (ca3.id = :consolidatorId OR ca3.consolidator_id = :consolidatorId)';

        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addEntityResult('App\Entity\DocumentSignature', 'ds');
        $rsm->addFieldResult('ds', 'id', 'id');
        $rsm->addFieldResult('ds', 'source_id', 'source_id');
        $rsm->addFieldResult('ds', 'document_id', 'document_id');
        $rsm->addFieldResult('ds', 'docusign_envelope_id', 'docusign_envelope_id');
        $rsm->addFieldResult('ds', 'type', 'type');
        $rsm->addFieldResult('ds', 'status', 'status');
        $rsm->addFieldResult('ds', 'active', 'active');
        $rsm->addFieldResult('ds', 'created', 'created');
        $rsm->addFieldResult('ds', 'updated', 'updated');

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters([
            'open_or_transfer_account' => DocumentSignature::TYPE_OPEN_OR_TRANSFER_ACCOUNT,
            'auto_invest_contribution' => DocumentSignature::TYPE_AUTO_INVEST_CONTRIBUTION,
            'auto_distribution' => DocumentSignature::TYPE_AUTO_DISTRIBUTION,
            'one_time_contribution' => DocumentSignature::TYPE_ONE_TIME_CONTRIBUTION,
            'one_time_distribution' => DocumentSignature::TYPE_ONE_TIME_DISTRIBUTION,
            'transfer_information' => DocumentSignature::TYPE_TRANSFER_INFORMATION,
            'consolidatorId' => $consolidatorId,
        ]);

        $signatures = $query->getResult();
        usort($signatures, function (
            \App\Entity\DocumentSignature $a,
            \App\Entity\DocumentSignature $b
        ) {
            /* @var  \App\Entity\DocumentSignature $a */
            /* @var  \App\Entity\DocumentSignature $b */
            return $a->getOrder() - $b->getOrder();
        });

        return $signatures;
    }

    /**
     * Find one change_beneficiary signature with status created by client account id.
     *
     * @param int $accountId
     *
     * @return DocumentSignature|null
     */
    public function findChangeBeneficiaryCreatedByClientAccountId($accountId)
    {
        $sql = 'SELECT ds.* FROM document_signatures ds
                LEFT JOIN client_beneficiaries cb ON (ds.source_id = cb.id AND ds.type = :type_change_beneficiary)
                WHERE cb.account_id = :account_id AND ds.status = :status_created AND ds.active = :is_active LIMIT 1';

        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addEntityResult('App\Entity\DocumentSignature', 'ds');
        $rsm->addFieldResult('ds', 'id', 'id');
        $rsm->addFieldResult('ds', 'source_id', 'source_id');
        $rsm->addFieldResult('ds', 'document_id', 'document_id');
        $rsm->addFieldResult('ds', 'docusign_envelope_id', 'docusign_envelope_id');
        $rsm->addFieldResult('ds', 'type', 'type');
        $rsm->addFieldResult('ds', 'status', 'status');
        $rsm->addFieldResult('ds', 'active', 'active');
        $rsm->addFieldResult('ds', 'created', 'created');
        $rsm->addFieldResult('ds', 'updated', 'updated');

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters([
            'type_change_beneficiary' => DocumentSignature::TYPE_CHANGE_BENEFICIARY,
            'account_id' => $accountId,
            'status_created' => Envelope::STATUS_CREATED,
            'is_active' => 1,
        ]);

        return $query->getOneOrNullResult();
    }

    /**
     * Find change_beneficiary signatures by client account id.
     *
     * @param int $accountId
     *
     * @return DocumentSignature[]
     */
    public function findChangeBeneficiaryByClientAccountId($accountId)
    {
        $sql = 'SELECT ds.* FROM document_signatures ds
                LEFT JOIN client_beneficiaries cb ON (ds.source_id = cb.id)
                WHERE cb.account_id = :account_id AND ds.active = :is_active AND ds.type = :type_change_beneficiary';

        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addEntityResult('App\Entity\DocumentSignature', 'ds');
        $rsm->addFieldResult('ds', 'id', 'id');
        $rsm->addFieldResult('ds', 'source_id', 'source_id');
        $rsm->addFieldResult('ds', 'document_id', 'document_id');
        $rsm->addFieldResult('ds', 'docusign_envelope_id', 'docusign_envelope_id');
        $rsm->addFieldResult('ds', 'type', 'type');
        $rsm->addFieldResult('ds', 'status', 'status');
        $rsm->addFieldResult('ds', 'active', 'active');
        $rsm->addFieldResult('ds', 'created', 'created');
        $rsm->addFieldResult('ds', 'updated', 'updated');

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters([
            'type_change_beneficiary' => DocumentSignature::TYPE_CHANGE_BENEFICIARY,
            'account_id' => $accountId,
            'is_active' => 1,
        ]);

        return $query->getResult();
    }

    /**
     * Get repository for signable objects by type.
     *
     * @param string $type
     *
     * @return SignableObjectRepositoryInterface
     *
     * @throws \InvalidArgumentException
     */
    public function getRepositoryByType($type)
    {
        switch ($type) {
            case DocumentSignature::TYPE_OPEN_OR_TRANSFER_ACCOUNT:
                $entityName = 'App\Entity\ClientAccount';
                break;
            case DocumentSignature::TYPE_TRANSFER_INFORMATION:
                $entityName = 'App\Entity\TransferInformation';
                break;
            case DocumentSignature::TYPE_AUTO_INVEST_CONTRIBUTION:
                $entityName = 'App\Entity\AccountContribution';
                break;
            case DocumentSignature::TYPE_ONE_TIME_CONTRIBUTION:
                $entityName = 'App\Entity\OneTimeContribution';
                break;
            case DocumentSignature::TYPE_AUTO_DISTRIBUTION:
            case DocumentSignature::TYPE_ONE_TIME_DISTRIBUTION:
                $entityName = 'App\Entity\Distribution';
                break;
            case DocumentSignature::TYPE_CHANGE_BENEFICIARY:
                $entityName = 'App\Entity\Beneficiary';
                break;
           /* case DocumentSignature::TYPE_BANK_INFORMATION:
                $entityName = 'App\Entity\BankInformation';
                break;*/
            default:
                throw new \InvalidArgumentException(sprintf('Invalid document signature type: %s.', $type));
                break;
        }

        $em = $this->_em;

        return $em->getRepository($entityName);
    }
}
