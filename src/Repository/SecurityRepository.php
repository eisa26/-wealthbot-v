<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\Security;

/**
 * OutsideFundRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SecurityRepository extends EntityRepository
{
    /**
     * @param $symbol
     *
     * @return Security|null
     */
    public function findOneBySymbol($symbol)
    {
        return $this->findOneBy(['symbol' => $symbol]);
    }

    public function findAllWithPrice()
    {
        $qb = $this->getFindWithCurrentPriceQueryBuilder();

        return $qb->getQuery()->getResult();
    }

    public function findWithPrice($id)
    {
        $qb = $this->getFindWithCurrentPriceQueryBuilder();

        $qb->andWhere('s.id = :id')
            ->setParameter('id', $id)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getFindWithCurrentPriceQueryBuilder()
    {
        $qb = $this->createQueryBuilder('s')
            ->select('s as data', 'sp.price as current_price, sp.datetime as on_date')
            ->leftJoin('s.securityPrices', 'sp')
            ->where('sp.is_current = :is_current')
            ->setParameter('is_current', 1);

        return $qb;
    }

    public function findNotAssignedSecurityByModelIdAndSymbol($modelId, $symbol)
    {
        $qb = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.symbol LIKE :symbol')
            ->andWhere('s.id NOT IN (SELECT sa.security_id FROM App\Entity\SecurityAssignment sa WHERE sa.model_id = :modelId OR sa.model_id IS NULL)')
            ->setParameters([
                'symbol' => '%'.$symbol.'%',
                'modelId' => $modelId,
            ])
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param null $symbol
     *
     * @return array
     */
    public function getAll($symbol = null)
    {
        $qb = $this->createQueryBuilder('s');

        if (!empty($symbol)) {
            $qb->where('s.symbol LIKE :symbol')->setParameter('symbol', "%{$symbol}%");
        }

        return $qb
            ->orderBy('s.name', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }
}
