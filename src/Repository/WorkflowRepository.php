<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\Workflow;
use App\Model\ClientAccount;
use App\Entity\User;

/**
 * WorkflowRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkflowRepository extends EntityRepository
{
    /**
     * Returns query for all workflow by id of ria user.
     *
     * @param int       $riaId
     * @param bool|null $isArchived
     *
     * @return \Doctrine\ORM\Query
     */
    public function findByRiaIdQuery($riaId, $isArchived = null)
    {
        $qb = $this->createQueryBuilder('w');

        $qb->leftJoin('w.client', 'cu')
            ->leftJoin('cu.clientSettings', 'cucs')
            ->leftJoin('cu.profile', 'cup')
            ->leftJoin('cup.ria', 'ru')
            ->where('ru.id = :ria_id')
            ->setParameter('ria_id', $riaId)
            ->orderBy('w.submitted', 'desc');

        if (null !== $isArchived) {
            $qb->andWhere('w.is_archived = :is_archived')
                ->setParameter('is_archived', (bool) $isArchived);
        }

        return $qb->getQuery();
    }

    /**
     * Find all workflow by id of ria user.
     *
     * @param int       $riaId
     * @param bool|null $isArchived
     *
     * @return array
     */
    public function findByRiaId($riaId, $isArchived = null)
    {
        return $this->findByRiaIdQuery($riaId, $isArchived)->getResult();
    }

    /**
     * Find one workflow by id and id of ria user.
     *
     * @param int       $id
     * @param int       $riaId
     * @param bool|null $isArchived
     *
     * @return mixed
     */
    public function findOneByIdAndRiaId($id, $riaId, $isArchived = null)
    {
        $qb = $this->createQueryBuilder('w');

        $qb->leftJoin('w.client', 'cu')
            ->leftJoin('cu.profile', 'cup')
            ->leftJoin('cup.ria', 'ru')
            ->where('w.id = :id')
            ->andWhere('ru.id = :ria_id')
            ->setParameters([
                'id' => $id,
                'ria_id' => $riaId,
            ])
            ->setMaxResults(1);

        if (null !== $isArchived) {
            $qb->andWhere('w.is_archived = :is_archived')
                ->setParameter('is_archived', (bool) $isArchived);
        }

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Returns array of paperwork counts by status.
     *
     * @param int $riaId
     *
     * @return array
     */
    public function getPaperworkCountsByRiaId($riaId)
    {
        $qb = $this->createQueryBuilder('w');

        $qb->select('w.status', 'count(w.id) number')
            ->leftJoin('w.client', 'cu')
            ->leftJoin('cu.profile', 'cup')
            ->where('cup.ria_user_id = :ria_id')
            ->andWhere('w.type = :type')
            ->setParameters([
                'ria_id' => $riaId,
                'type' => Workflow::TYPE_PAPERWORK,
            ])
            ->groupBy('w.status');

        $result = [
            'new' => 0,
            'in_progress' => 0,
            'pending' => 0,
            'completed' => 0,
        ];

        foreach ($qb->getQuery()->getResult() as $item) {
            switch ($item['status']) {
                case 0:
                    $key = 'new';
                    break;
                case 1:
                    $key = 'in_progress';
                    break;
                case 2:
                    $key = 'pending';
                    break;
                default:
                    $key = 'completed';
                    break;
            }

            $result[$key] = $item['number'];
        }

        return $result;
    }

    /**
     * Find one workflow by document_signature_id.
     *
     * @param int $documentSignatureId
     *
     * @return Workflow|null
     */
    public function findOneByDocumentSignatureId($documentSignatureId)
    {
        $qb = $this->createQueryBuilder('w');

        $qb->leftJoin('w.documentSignatures', 'ds')
            ->where('ds.id = :document_signature_id')
            ->setParameter('document_signature_id', $documentSignatureId)
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Find account application workflow.
     *
     * @param ClientAccount $account
     *
     * @return Workflow|null
     */
    public function findAccountApplicationWorkflow(ClientAccount $account)
    {
        $messageCodes = [
            Workflow::MESSAGE_CODE_PAPERWORK_NEW_ACCOUNT,
            Workflow::MESSAGE_CODE_PAPERWORK_TRANSFER,
            Workflow::MESSAGE_CODE_PAPERWORK_ROLLOVER,
        ];

        $qb = $this->createQueryBuilder('w');

        $qb->where('w.client = :client')
            ->andWhere('w.object_id = :account_id')
            ->andWhere($qb->expr()->in('w.message_code', $messageCodes))
            ->setMaxResults(1)
            ->setParameters([
                'client' => $account->getClient(),
                'account_id' => $account->getId(),
            ]);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getInitialRebalanceCountByRia(User $ria)
    {
        $qb = $this->createQueryBuilder('w');

        $qb->select('count(w.id) initial_rabalance_count')
            ->leftJoin('w.client', 'cu')
            ->leftJoin('cu.profile', 'cup')
            ->where('cup.ria = :ria')
            ->andWhere('w.message_code = :message_code')
            ->groupBy('w.message_code');

        $qb->setParameters([
            'ria' => $ria,
            'message_code' => Workflow::MESSAGE_CODE_PAPERWORK_INITIAL_REBALANCE,
        ]);

        $count = 0;
        $result = $qb->getQuery()->getOneOrNullResult();
        if ($result && isset($result['initial_rabalance_count'])) {
            $count = $result['initial_rabalance_count'];
        }

        return $count;
    }
}
