<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\User;

/**
 * RiskQuestionRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RiskQuestionRepository extends EntityRepository
{
    /**
     * @param null $firstResult
     *
     * @return \App\Entity\RiskQuestion $question | null
     */
    public function getOneQuestionOrderedBySequence($firstResult = null)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('rq')
            ->from('App\Entity\RiskQuestion', 'rq')
            ->orderBy('rq.sequence', 'ASC')
            ->setMaxResults(1);

        if (!is_null($firstResult)) {
            $query->setFirstResult($firstResult);
        }

        try {
            $question = $query->getQuery()->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $question = null;
        }

        return $question;
    }

    public function getAll()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('rq')
            ->from('App\Entity\RiskQuestion', 'rq')
            ->orderBy('rq.sequence', 'ASC')
        ;

        $questions = $query->getQuery()->getResult();

        return $questions;
    }

    public function getOrderedQuestionsByOwnerId($ownerId, $order = 'asc')
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('rq')
            ->from('App\Entity\RiskQuestion', 'rq')
            ->where('rq.owner_id = :owner_id')
            ->setParameter('owner_id', $ownerId)
            ->orderBy('rq.sequence', $order)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Get risk questions for user with ADMIN role.
     *
     * @param string $order
     *
     * @return array
     */
    public function getAdminQuestions($order = 'asc')
    {
        $order = ('desc' === $order) ? 'desc' : 'asc';

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('rq')
            ->from('App\Entity\RiskQuestion', 'rq')
            ->leftJoin('rq.owner', 'o')
            ->where('o.roles LIKE :role')
            ->setParameter('role', '%"ROLE_SUPER_ADMIN"%')
            ->orderBy('rq.sequence', $order)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Get risk questions by owner_id or if not exists admins questions.
     *
     * @param $ownerId
     * @param string $order
     *
     * @return array
     */
    public function getOwnerQuestionsOrAdminIfNotExists($ownerId, $order = 'asc')
    {
        $questions = $this->getOrderedQuestionsByOwnerId($ownerId, $order);
        if (is_array($questions) && count($questions)) {
            return $questions;
        }

        return $this->getAdminQuestions($order);
    }

    /**
     * Returns ria if he has risk questions and admin otherwise.
     *
     * @param User $user
     *
     * @return User
     */
    public function getQuestionsOwner(User $user)
    {
        if ($user->hasRole('ROLE_CLIENT')) {
            $ria = $user->getRia();
        } else {
            $ria = $user;
        }

        $existQuestion = $this->findOneBy(['owner_id' => $ria->getId()]);
        if ($existQuestion) {
            return $ria;
        }

        return $this->_em->getRepository('App\Entity\User')->getAdmin();
    }

    public function getClonedAdminQuestions(\App\Entity\User $owner, $order = 'asc')
    {
        $em = $this->_em;
        $adminQuestions = $this->getAdminQuestions($order);

        $questions = [];
        foreach ($adminQuestions as $adminQuestion) {
            $question = clone $adminQuestion;

            $question->setId(null);
            $question->setOwner($owner);

            $em->persist($question);

            foreach ($question->getAnswers() as $answer) {
                $newAnswer = clone $answer;

                $newAnswer->setId(null);
                $newAnswer->setQuestion($question);

                $em->persist($newAnswer);
            }

            $questions[] = $question;
        }

        $em->flush();

        return $questions;
    }
}
