<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use App\Entity\Job;
use App\Entity\ClientPortfolioValue;
use App\Entity\User;

/**
 * ClientPortfolioValueRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientPortfolioValueRepository extends EntityRepository
{
    /**
     * Get Ordered PortfolioValues for Client By Date.
     *
     * @param $clientId
     * @param string $order
     *
     * @return array
     */
    public function findOrderedByDateForClient($clientId, $order = 'ASC')
    {
        $qb = $this->getOrderedByDateForClientQuery($clientId, $order);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get All History for Ria Clients Query.
     *
     * @param User $ria
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findHistoryForRiaClientsQuery(User $ria, $filters = [])
    {
        $qb = $this->createQueryBuilder('cpv')
            ->leftJoin('cpv.clientPortfolio', 'cp')
            ->leftJoin('cp.client', 'c')
            ->leftJoin('c.profile', 'p')
            ->leftJoin('c.groups', 'cg')
            ->leftJoin('cp.portfolio', 'po')
            ->leftJoin('p.ria', 'r')
            ->leftJoin('r.riaCompanyInformation', 'rci')
            ->where('p.ria_user_id = :riaId')
            ->setParameter('riaId', $ria->getId())
        ;

        if (!empty($filters)) {
            if (isset($filters['client_id']) && $filters['client_id']) {
                $qb
                    ->andWhere('c.id = :clientId')
                    ->setParameter('clientId', $filters['client_id']);
            } elseif (isset($filters['client']) && $filters['client']) {
                $name = explode(',', $filters['client']);
                $lname = trim($name[0]);
                $fname = isset($name[1]) && $name[1] ? trim($name[1]) : null;

                if ($fname) {
                    $qb
                        ->andWhere('p.last_name = :lname AND p.first_name LIKE :fname')
                        ->setParameter('lname', $lname)
                        ->setParameter('fname', '%'.$fname.'%')
                    ;
                } else {
                    $qb
                        ->andWhere('p.last_name LIKE :searchStr OR p.first_name LIKE :searchStr')
                        ->setParameter('searchStr', '%'.$lname.'%')
                    ;
                }
            }

            if (isset($filters['date_from']) && $filters['date_from']) {
                $date = \DateTime::createFromFormat('m-d-Y', $filters['date_from']);

                $qb
                    ->andWhere('cpv.date >= :dateFrom')
                    ->setParameter('dateFrom', $date->format('Y-m-d'));
            }

            if (isset($filters['date_to']) && $filters['date_to']) {
                $date = \DateTime::createFromFormat('m-d-Y', $filters['date_to']);

                $qb
                    ->andWhere('cpv.date <= :dateTo')
                    ->setParameter('dateTo', $date->format('Y-m-d'));
            }

            if (isset($filters['set_id']) && $filters['set_id']) {
                $qb
                    ->andWhere('cg.id = :group')
                    ->setParameter('group', $filters['set_id']);
            }
        }

        return $qb;
    }

    /**
     * Get All History for Ria Clients.
     *
     * @param User $ria
     *
     * @return array
     */
    public function findHistoryForRiaClients(User $ria, $filters = [])
    {
        $qb = $this->findHistoryForRiaClientsQuery($ria, $filters);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get Latest PortfolioValues Query For Clients.
     *
     * @param $clients
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findLatestValuesForRiaClientsQuery($clients)
    {
        $ids = [];
        foreach ($clients as $client) {
            $lastPortfolioValue = $this->getLatestValueForClient($client->getId());

            if ($lastPortfolioValue) {
                $ids[] = $lastPortfolioValue->getId();
            }
        }

        return $this->findValuesByIdsQuery($ids);
    }

    /**
     * Get Latest PortfolioValues For Clients.
     *
     * @param $clients
     *
     * @return array
     */
    public function findLatestValuesForRiaClients($clients)
    {
        $qb = $this->findLatestValuesForRiaClientsQuery($clients);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get PortfolioValues by Ids.
     *
     * @param array $ids
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findValuesByIdsQuery(array $ids)
    {
        $qb = $this->createQueryBuilder('cpv')
            ->where('cpv.id IN(:ids)')
            ->leftJoin('cpv.clientPortfolio', 'cp')
            ->leftJoin('cp.client', 'c')
            ->leftJoin('c.groups', 'cg')
            ->leftJoin('c.profile', 'p')
            ->leftJoin('cp.portfolio', 'po')
            ->leftJoin('p.ria', 'r')
            ->leftJoin('r.riaCompanyInformation', 'rci')
            ->leftJoin('cpv.rebalancerActions', 'ra')
            ->setParameter('ids', $ids);

        return $qb;
    }

    /**
     * Get Latest PortfolioValues for Job.
     *
     * @param Job $job
     *
     * @return array
     */
    public function findLatestValueForJob(Job $job)
    {
        $qb = $this->createQueryBuilder('cpv')
            ->leftJoin('cpv.rebalancerActions', 'ra')
            ->where('ra.job = :job')
            ->setParameter('job', $job);

        return $qb->getQuery()->getResult();

//        $sql = "SELECT * FROM client_portfolio_values cpv
//                  LEFT JOIN rebalancer_actions ra ON ra.client_portfolio_value_id = cpv.id
//                WHERE ra.job_id = 99
//;
//
//        ";
//
//        $rsm  = new Query\ResultSetMappingBuilder($this->_em);
//        $rsm->addEntityResult('App\Entity\ClientPortfolioValue', 'cpv');
//        $rsm->addFieldResult('cpv', 'id', 'id');
//        $rsm->addFieldResult('cpv', 'client_portfolio_id', 'client_portfolio_id');
//        $rsm->addFieldResult('cpv', 'total_value', 'total_value');
//        $rsm->addFieldResult('cpv', 'total_in_securities', 'total_in_securities');
//        $rsm->addFieldResult('cpv', 'total_cash_in_accounts', 'total_cash_in_accounts');
//        $rsm->addFieldResult('cpv', 'total_cash_in_money_marker', 'total_cash_in_money_marker');
//        $rsm->addFieldResult('cpv', 'date', 'date');
//        $rsm->addFieldResult('cpv', 'sas_cash', 'sas_cash');
//        $rsm->addFieldResult('cpv', 'cash_buffer', 'cash_buffer');
//        $rsm->addFieldResult('cpv', 'billing_cash', 'billing_cash');
//        $rsm->addFieldResult('cpv', 'model_deviation', 'model_deviation');
//        $rsm->addFieldResult('cpv', 'required_cash', 'required_cash');
//        $rsm->addFieldResult('cpv', 'investable_cash', 'investable_cash');
//
//        $query = $this->_em->createNativeQuery($sql, $rsm);
//        $query->setParameter('jobId', $job->getId());
//
//        return $query->getResult();
    }

    /**
     * Get Latest PortfolioValues For Client.
     *
     * @param $clientId
     *
     * @return mixed
     */
    private function getLatestValueForClient($clientId)
    {
        $qb = $this->getOrderedByDateForClientQuery($clientId, 'DESC')
            ->andWhere('cp.is_active = true')
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    private function getOrderedByDateForClientQuery($clientId, $order = 'ASC')
    {
        $qb = $this->createQueryBuilder('cpv')
            ->leftJoin('cpv.clientPortfolio', 'cp')
            ->where('cp.client_id = :clientId')
            ->setParameter('clientId', $clientId)
            ->orderBy('cpv.date', $order);

        return $qb;
    }

    /**
     * @param User $client
     *
     * @return \App\Entity\ClientPortfolioValue|null
     */
    public function getLastValueByClient(User $client)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.clientPortfolio', 'cp')
            ->where('cp.client = :client')
            ->andWhere('cp.is_active = true')
            ->setParameter('client', $client)
            ->orderBy('c.date', 'DESC')
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param User      $client
     * @param \DateTime $dateTo
     *
     * @return mixed
     */
    public function getLastBeforeDate(User $client, \DateTime $dateTo)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.clientPortfolio', 'cp')
            ->where('cp.client = :client')
            ->andWhere('cp.is_active = true')
            ->andWhere('c.date < :dateTo')
            ->setParameter('client', $client)
            ->setParameter('dateTo', $dateTo)
            ->orderBy('c.date', 'DESC')
            ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getExtreme(User $client, \DateTime $dateFrom, \DateTime $dateTo, $order = 'ASC')
    {
        $qb = $this->createQueryBuilder('c');

        return $qb
            ->leftJoin('c.clientPortfolio', 'cp')

            ->where('cp.client = :client')
            ->andWhere('cp.is_active = true')
            ->andWhere($qb->expr()->between('c.date', ':dateFrom', ':dateTo'))

            ->setParameter('client', $client)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)

            ->orderBy('c.date', 'ASC')

            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    /**
     * @param User      $client
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return ClientPortfolioValue|null
     */
    public function getFirstByDate(User $client, \DateTime $dateFrom, \DateTime $dateTo)
    {
        return $this->getExtreme($client, $dateFrom, $dateTo);
    }

    /**
     * @param User      $client
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return ClientPortfolioValue|null
     */
    public function getLastByDate(User $client, \DateTime $dateFrom, \DateTime $dateTo)
    {
        return $this->getExtreme($client, $dateFrom, $dateTo, 'DESC');
    }
}
